// source: approximation.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.approximationService.CurveFitRequest', null, global);
goog.exportSymbol('proto.approximationService.CurveFitResult', null, global);
goog.exportSymbol('proto.approximationService.Expression', null, global);
goog.exportSymbol('proto.approximationService.FitResult', null, global);
goog.exportSymbol('proto.approximationService.Parameter', null, global);
goog.exportSymbol('proto.approximationService.RequestExpressionParameter', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.approximationService.Parameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.approximationService.Parameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.approximationService.Parameter.displayName = 'proto.approximationService.Parameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.approximationService.FitResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.approximationService.FitResult.repeatedFields_, null);
};
goog.inherits(proto.approximationService.FitResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.approximationService.FitResult.displayName = 'proto.approximationService.FitResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.approximationService.RequestExpressionParameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.approximationService.RequestExpressionParameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.approximationService.RequestExpressionParameter.displayName = 'proto.approximationService.RequestExpressionParameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.approximationService.Expression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.approximationService.Expression.repeatedFields_, null);
};
goog.inherits(proto.approximationService.Expression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.approximationService.Expression.displayName = 'proto.approximationService.Expression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.approximationService.CurveFitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.approximationService.CurveFitRequest.repeatedFields_, null);
};
goog.inherits(proto.approximationService.CurveFitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.approximationService.CurveFitRequest.displayName = 'proto.approximationService.CurveFitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.approximationService.CurveFitResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.approximationService.CurveFitResult.repeatedFields_, null);
};
goog.inherits(proto.approximationService.CurveFitResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.approximationService.CurveFitResult.displayName = 'proto.approximationService.CurveFitResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.approximationService.Parameter.prototype.toObject = function(opt_includeInstance) {
  return proto.approximationService.Parameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.approximationService.Parameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.Parameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    stderr: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.approximationService.Parameter}
 */
proto.approximationService.Parameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.approximationService.Parameter;
  return proto.approximationService.Parameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.approximationService.Parameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.approximationService.Parameter}
 */
proto.approximationService.Parameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStderr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.approximationService.Parameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.approximationService.Parameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.approximationService.Parameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.Parameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getStderr();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.approximationService.Parameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.approximationService.Parameter} returns this
 */
proto.approximationService.Parameter.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.approximationService.Parameter.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.Parameter} returns this
 */
proto.approximationService.Parameter.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float stderr = 3;
 * @return {number}
 */
proto.approximationService.Parameter.prototype.getStderr = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.Parameter} returns this
 */
proto.approximationService.Parameter.prototype.setStderr = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.approximationService.FitResult.repeatedFields_ = [16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.approximationService.FitResult.prototype.toObject = function(opt_includeInstance) {
  return proto.approximationService.FitResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.approximationService.FitResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.FitResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    successStatus: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    modelName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    modelExpression: jspb.Message.getFieldWithDefault(msg, 4, ""),
    r: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    rSqrt: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    aic: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    bic: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    fog: jspb.Message.getFieldWithDefault(msg, 9, 0),
    meanOfX: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    meanOfY: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    chiSqrt: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    reducedChiSqrt: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    dataPoints: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    fittingMethod: jspb.Message.getFieldWithDefault(msg, 15, ""),
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.approximationService.Parameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.approximationService.FitResult}
 */
proto.approximationService.FitResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.approximationService.FitResult;
  return proto.approximationService.FitResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.approximationService.FitResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.approximationService.FitResult}
 */
proto.approximationService.FitResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setModelId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccessStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelExpression(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setR(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRSqrt(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAic(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBic(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFog(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanOfX(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMeanOfY(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChiSqrt(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReducedChiSqrt(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDataPoints(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setFittingMethod(value);
      break;
    case 16:
      var value = new proto.approximationService.Parameter;
      reader.readMessage(value,proto.approximationService.Parameter.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.approximationService.FitResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.approximationService.FitResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.approximationService.FitResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.FitResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModelId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSuccessStatus();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getModelName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getModelExpression();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getR();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getRSqrt();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getAic();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getBic();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getFog();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getMeanOfX();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getMeanOfY();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getChiSqrt();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getReducedChiSqrt();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getDataPoints();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getFittingMethod();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.approximationService.Parameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 model_id = 1;
 * @return {number}
 */
proto.approximationService.FitResult.prototype.getModelId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setModelId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool success_status = 2;
 * @return {boolean}
 */
proto.approximationService.FitResult.prototype.getSuccessStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setSuccessStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string model_name = 3;
 * @return {string}
 */
proto.approximationService.FitResult.prototype.getModelName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setModelName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string model_expression = 4;
 * @return {string}
 */
proto.approximationService.FitResult.prototype.getModelExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setModelExpression = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional float r = 5;
 * @return {number}
 */
proto.approximationService.FitResult.prototype.getR = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setR = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float r_sqrt = 6;
 * @return {number}
 */
proto.approximationService.FitResult.prototype.getRSqrt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setRSqrt = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float aic = 7;
 * @return {number}
 */
proto.approximationService.FitResult.prototype.getAic = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setAic = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float bic = 8;
 * @return {number}
 */
proto.approximationService.FitResult.prototype.getBic = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setBic = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional uint32 fog = 9;
 * @return {number}
 */
proto.approximationService.FitResult.prototype.getFog = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setFog = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional float mean_of_x = 10;
 * @return {number}
 */
proto.approximationService.FitResult.prototype.getMeanOfX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setMeanOfX = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float mean_of_y = 11;
 * @return {number}
 */
proto.approximationService.FitResult.prototype.getMeanOfY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setMeanOfY = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float chi_sqrt = 12;
 * @return {number}
 */
proto.approximationService.FitResult.prototype.getChiSqrt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setChiSqrt = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float reduced_chi_sqrt = 13;
 * @return {number}
 */
proto.approximationService.FitResult.prototype.getReducedChiSqrt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setReducedChiSqrt = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float data_points = 14;
 * @return {number}
 */
proto.approximationService.FitResult.prototype.getDataPoints = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setDataPoints = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional string fitting_method = 15;
 * @return {string}
 */
proto.approximationService.FitResult.prototype.getFittingMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.setFittingMethod = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * repeated Parameter parameters = 16;
 * @return {!Array<!proto.approximationService.Parameter>}
 */
proto.approximationService.FitResult.prototype.getParametersList = function() {
  return /** @type{!Array<!proto.approximationService.Parameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.approximationService.Parameter, 16));
};


/**
 * @param {!Array<!proto.approximationService.Parameter>} value
 * @return {!proto.approximationService.FitResult} returns this
*/
proto.approximationService.FitResult.prototype.setParametersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.approximationService.Parameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.approximationService.Parameter}
 */
proto.approximationService.FitResult.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.approximationService.Parameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.approximationService.FitResult} returns this
 */
proto.approximationService.FitResult.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.approximationService.RequestExpressionParameter.prototype.toObject = function(opt_includeInstance) {
  return proto.approximationService.RequestExpressionParameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.approximationService.RequestExpressionParameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.RequestExpressionParameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    paramname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paramvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    minbound: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    maxbound: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.approximationService.RequestExpressionParameter}
 */
proto.approximationService.RequestExpressionParameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.approximationService.RequestExpressionParameter;
  return proto.approximationService.RequestExpressionParameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.approximationService.RequestExpressionParameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.approximationService.RequestExpressionParameter}
 */
proto.approximationService.RequestExpressionParameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParamname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setParamvalue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinbound(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxbound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.approximationService.RequestExpressionParameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.approximationService.RequestExpressionParameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.approximationService.RequestExpressionParameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.RequestExpressionParameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParamname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParamvalue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getMinbound();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getMaxbound();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string paramName = 1;
 * @return {string}
 */
proto.approximationService.RequestExpressionParameter.prototype.getParamname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.approximationService.RequestExpressionParameter} returns this
 */
proto.approximationService.RequestExpressionParameter.prototype.setParamname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float paramValue = 2;
 * @return {number}
 */
proto.approximationService.RequestExpressionParameter.prototype.getParamvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.RequestExpressionParameter} returns this
 */
proto.approximationService.RequestExpressionParameter.prototype.setParamvalue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float minBound = 3;
 * @return {number}
 */
proto.approximationService.RequestExpressionParameter.prototype.getMinbound = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.RequestExpressionParameter} returns this
 */
proto.approximationService.RequestExpressionParameter.prototype.setMinbound = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float maxBound = 4;
 * @return {number}
 */
proto.approximationService.RequestExpressionParameter.prototype.getMaxbound = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.RequestExpressionParameter} returns this
 */
proto.approximationService.RequestExpressionParameter.prototype.setMaxbound = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.approximationService.Expression.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.approximationService.Expression.prototype.toObject = function(opt_includeInstance) {
  return proto.approximationService.Expression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.approximationService.Expression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.Expression.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expression: jspb.Message.getFieldWithDefault(msg, 3, ""),
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.approximationService.RequestExpressionParameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.approximationService.Expression}
 */
proto.approximationService.Expression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.approximationService.Expression;
  return proto.approximationService.Expression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.approximationService.Expression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.approximationService.Expression}
 */
proto.approximationService.Expression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpression(value);
      break;
    case 4:
      var value = new proto.approximationService.RequestExpressionParameter;
      reader.readMessage(value,proto.approximationService.RequestExpressionParameter.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.approximationService.Expression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.approximationService.Expression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.approximationService.Expression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.Expression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpression();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.approximationService.RequestExpressionParameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.approximationService.Expression.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.approximationService.Expression} returns this
 */
proto.approximationService.Expression.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.approximationService.Expression.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.approximationService.Expression} returns this
 */
proto.approximationService.Expression.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string expression = 3;
 * @return {string}
 */
proto.approximationService.Expression.prototype.getExpression = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.approximationService.Expression} returns this
 */
proto.approximationService.Expression.prototype.setExpression = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated RequestExpressionParameter parameters = 4;
 * @return {!Array<!proto.approximationService.RequestExpressionParameter>}
 */
proto.approximationService.Expression.prototype.getParametersList = function() {
  return /** @type{!Array<!proto.approximationService.RequestExpressionParameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.approximationService.RequestExpressionParameter, 4));
};


/**
 * @param {!Array<!proto.approximationService.RequestExpressionParameter>} value
 * @return {!proto.approximationService.Expression} returns this
*/
proto.approximationService.Expression.prototype.setParametersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.approximationService.RequestExpressionParameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.approximationService.RequestExpressionParameter}
 */
proto.approximationService.Expression.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.approximationService.RequestExpressionParameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.approximationService.Expression} returns this
 */
proto.approximationService.Expression.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.approximationService.CurveFitRequest.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.approximationService.CurveFitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.approximationService.CurveFitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.approximationService.CurveFitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.CurveFitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    xDataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    yDataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    expressionsList: jspb.Message.toObjectList(msg.getExpressionsList(),
    proto.approximationService.Expression.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.approximationService.CurveFitRequest}
 */
proto.approximationService.CurveFitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.approximationService.CurveFitRequest;
  return proto.approximationService.CurveFitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.approximationService.CurveFitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.approximationService.CurveFitRequest}
 */
proto.approximationService.CurveFitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addXData(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addYData(values[i]);
      }
      break;
    case 3:
      var value = new proto.approximationService.Expression;
      reader.readMessage(value,proto.approximationService.Expression.deserializeBinaryFromReader);
      msg.addExpressions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.approximationService.CurveFitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.approximationService.CurveFitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.approximationService.CurveFitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.CurveFitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXDataList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getYDataList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getExpressionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.approximationService.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * repeated float x_data = 1;
 * @return {!Array<number>}
 */
proto.approximationService.CurveFitRequest.prototype.getXDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.approximationService.CurveFitRequest} returns this
 */
proto.approximationService.CurveFitRequest.prototype.setXDataList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.approximationService.CurveFitRequest} returns this
 */
proto.approximationService.CurveFitRequest.prototype.addXData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.approximationService.CurveFitRequest} returns this
 */
proto.approximationService.CurveFitRequest.prototype.clearXDataList = function() {
  return this.setXDataList([]);
};


/**
 * repeated float y_data = 2;
 * @return {!Array<number>}
 */
proto.approximationService.CurveFitRequest.prototype.getYDataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.approximationService.CurveFitRequest} returns this
 */
proto.approximationService.CurveFitRequest.prototype.setYDataList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.approximationService.CurveFitRequest} returns this
 */
proto.approximationService.CurveFitRequest.prototype.addYData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.approximationService.CurveFitRequest} returns this
 */
proto.approximationService.CurveFitRequest.prototype.clearYDataList = function() {
  return this.setYDataList([]);
};


/**
 * repeated Expression expressions = 3;
 * @return {!Array<!proto.approximationService.Expression>}
 */
proto.approximationService.CurveFitRequest.prototype.getExpressionsList = function() {
  return /** @type{!Array<!proto.approximationService.Expression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.approximationService.Expression, 3));
};


/**
 * @param {!Array<!proto.approximationService.Expression>} value
 * @return {!proto.approximationService.CurveFitRequest} returns this
*/
proto.approximationService.CurveFitRequest.prototype.setExpressionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.approximationService.Expression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.approximationService.Expression}
 */
proto.approximationService.CurveFitRequest.prototype.addExpressions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.approximationService.Expression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.approximationService.CurveFitRequest} returns this
 */
proto.approximationService.CurveFitRequest.prototype.clearExpressionsList = function() {
  return this.setExpressionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.approximationService.CurveFitResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.approximationService.CurveFitResult.prototype.toObject = function(opt_includeInstance) {
  return proto.approximationService.CurveFitResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.approximationService.CurveFitResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.CurveFitResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    fitResultList: jspb.Message.toObjectList(msg.getFitResultList(),
    proto.approximationService.FitResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.approximationService.CurveFitResult}
 */
proto.approximationService.CurveFitResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.approximationService.CurveFitResult;
  return proto.approximationService.CurveFitResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.approximationService.CurveFitResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.approximationService.CurveFitResult}
 */
proto.approximationService.CurveFitResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.approximationService.FitResult;
      reader.readMessage(value,proto.approximationService.FitResult.deserializeBinaryFromReader);
      msg.addFitResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.approximationService.CurveFitResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.approximationService.CurveFitResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.approximationService.CurveFitResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.approximationService.CurveFitResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFitResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.approximationService.FitResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FitResult fit_result = 1;
 * @return {!Array<!proto.approximationService.FitResult>}
 */
proto.approximationService.CurveFitResult.prototype.getFitResultList = function() {
  return /** @type{!Array<!proto.approximationService.FitResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.approximationService.FitResult, 1));
};


/**
 * @param {!Array<!proto.approximationService.FitResult>} value
 * @return {!proto.approximationService.CurveFitResult} returns this
*/
proto.approximationService.CurveFitResult.prototype.setFitResultList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.approximationService.FitResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.approximationService.FitResult}
 */
proto.approximationService.CurveFitResult.prototype.addFitResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.approximationService.FitResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.approximationService.CurveFitResult} returns this
 */
proto.approximationService.CurveFitResult.prototype.clearFitResultList = function() {
  return this.setFitResultList([]);
};


goog.object.extend(exports, proto.approximationService);
